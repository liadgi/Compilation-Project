((lambda (x) 5) 4)
((lambda (x) x) 4)
((lambda (x y) 
	(begin (set! x 3) x)) 
1 2)
((lambda (x y) 
	(begin (set! y 3) x)) 
1 2)
((lambda (x) 
  (set! x 3)) 1)
((lambda (x y) 
	(set! x 3) x) 1 2)
(((lambda (x)
     (lambda (y)
       4)) 2) 1)
(((lambda (x)
     (lambda (y)
       x)) 2) 1)
(((lambda (x)
     (lambda (y)
       y)) 3) 4)
((lambda (x y)
  (cons x y)) 1 2)
((lambda (x y)
  (list x y)) 1 2)
(((lambda (x)
     (lambda (y)
       (set! x 3) x)) 2) 1)  
(define x 1)
;(list x (set! x 2) x)
(define test ((lambda (x)
  (lambda (y)
    (let ((oldx x))
      (set! x y) 
      (cons oldx x))
      )) 2))
(test 4)
(test 3)
(define x 1)
(define y 2)
(cons x y)
(cons 2 1)
((lambda (x y z)
  (or ((lambda (a b) a) #f 2) (or x y z))) #f 2 3)
((lambda (x y z)
  (or ((lambda (a b) a) #f 2) (or x y z))) #f '(1 2 3 #(4 5)) 3)
((lambda (x . y)
  y) 1 2 3 4)
(list 1 2 3)
(define x 3)
x
(define z 6)
(define y 5)
(cons x (cons y z))